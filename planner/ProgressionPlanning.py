from state import State
class ProgressionPlanning(object):
    '''
    ProgressionPlanning class implements all necessary components
    for implicitly generating the state space in a forward way (i.e., by progression).self
    '''
    def __init__(self, domain, problem):
        self._problem = problem
        self._all_actions = problem.ground_all_actions(domain)

    @property
    def problem(self):
        return self._problem

    @property
    def actions(self):
        return self._all_actions

    def applicable(self, state):
        ''' Return a list of applicable actions in a given `state`. '''
        app = list()
        for act in self.actions:
            if State(state).intersect(act.precond) == act.precond:
                app.append(act)
        return app

    def successor(self, state, action):
        ''' Return the sucessor state generated by executing `action` in `state`. '''
        return State(action.pos_effect).union(State(state).difference(action.neg_effect))